classdef ConfigWaypointFollower < robotics.ros.Message
    %ConfigWaypointFollower MATLAB implementation of runtime_manager/ConfigWaypointFollower
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'runtime_manager/ConfigWaypointFollower' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a96d66ec56e0a5b1d46eff2062a223b3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        ParamFlag
        Velocity
        LookaheadDistance
        LookaheadRatio
        MinimumLookaheadDistance
        DisplacementThreshold
        RelativeAngleThreshold
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DisplacementThreshold', 'Header', 'LookaheadDistance', 'LookaheadRatio', 'MinimumLookaheadDistance', 'ParamFlag', 'RelativeAngleThreshold', 'Velocity'} % List of non-constant message properties
        ROSPropertyList = {'displacement_threshold', 'header', 'lookahead_distance', 'lookahead_ratio', 'minimum_lookahead_distance', 'param_flag', 'relative_angle_threshold', 'velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigWaypointFollower(msg)
            %ConfigWaypointFollower Construct the message object ConfigWaypointFollower
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function paramflag = get.ParamFlag(obj)
            %get.ParamFlag Get the value for property ParamFlag
            paramflag = int32(obj.JavaMessage.getParamFlag);
        end
        
        function set.ParamFlag(obj, paramflag)
            %set.ParamFlag Set the value for property ParamFlag
            validateattributes(paramflag, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'ParamFlag');
            
            obj.JavaMessage.setParamFlag(paramflag);
        end
        
        function velocity = get.Velocity(obj)
            %get.Velocity Get the value for property Velocity
            velocity = single(obj.JavaMessage.getVelocity);
        end
        
        function set.Velocity(obj, velocity)
            %set.Velocity Set the value for property Velocity
            validateattributes(velocity, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'Velocity');
            
            obj.JavaMessage.setVelocity(velocity);
        end
        
        function lookaheaddistance = get.LookaheadDistance(obj)
            %get.LookaheadDistance Get the value for property LookaheadDistance
            lookaheaddistance = single(obj.JavaMessage.getLookaheadDistance);
        end
        
        function set.LookaheadDistance(obj, lookaheaddistance)
            %set.LookaheadDistance Set the value for property LookaheadDistance
            validateattributes(lookaheaddistance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'LookaheadDistance');
            
            obj.JavaMessage.setLookaheadDistance(lookaheaddistance);
        end
        
        function lookaheadratio = get.LookaheadRatio(obj)
            %get.LookaheadRatio Get the value for property LookaheadRatio
            lookaheadratio = single(obj.JavaMessage.getLookaheadRatio);
        end
        
        function set.LookaheadRatio(obj, lookaheadratio)
            %set.LookaheadRatio Set the value for property LookaheadRatio
            validateattributes(lookaheadratio, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'LookaheadRatio');
            
            obj.JavaMessage.setLookaheadRatio(lookaheadratio);
        end
        
        function minimumlookaheaddistance = get.MinimumLookaheadDistance(obj)
            %get.MinimumLookaheadDistance Get the value for property MinimumLookaheadDistance
            minimumlookaheaddistance = single(obj.JavaMessage.getMinimumLookaheadDistance);
        end
        
        function set.MinimumLookaheadDistance(obj, minimumlookaheaddistance)
            %set.MinimumLookaheadDistance Set the value for property MinimumLookaheadDistance
            validateattributes(minimumlookaheaddistance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'MinimumLookaheadDistance');
            
            obj.JavaMessage.setMinimumLookaheadDistance(minimumlookaheaddistance);
        end
        
        function displacementthreshold = get.DisplacementThreshold(obj)
            %get.DisplacementThreshold Get the value for property DisplacementThreshold
            displacementthreshold = single(obj.JavaMessage.getDisplacementThreshold);
        end
        
        function set.DisplacementThreshold(obj, displacementthreshold)
            %set.DisplacementThreshold Set the value for property DisplacementThreshold
            validateattributes(displacementthreshold, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'DisplacementThreshold');
            
            obj.JavaMessage.setDisplacementThreshold(displacementthreshold);
        end
        
        function relativeanglethreshold = get.RelativeAngleThreshold(obj)
            %get.RelativeAngleThreshold Get the value for property RelativeAngleThreshold
            relativeanglethreshold = single(obj.JavaMessage.getRelativeAngleThreshold);
        end
        
        function set.RelativeAngleThreshold(obj, relativeanglethreshold)
            %set.RelativeAngleThreshold Set the value for property RelativeAngleThreshold
            validateattributes(relativeanglethreshold, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigWaypointFollower', 'RelativeAngleThreshold');
            
            obj.JavaMessage.setRelativeAngleThreshold(relativeanglethreshold);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ParamFlag = obj.ParamFlag;
            cpObj.Velocity = obj.Velocity;
            cpObj.LookaheadDistance = obj.LookaheadDistance;
            cpObj.LookaheadRatio = obj.LookaheadRatio;
            cpObj.MinimumLookaheadDistance = obj.MinimumLookaheadDistance;
            cpObj.DisplacementThreshold = obj.DisplacementThreshold;
            cpObj.RelativeAngleThreshold = obj.RelativeAngleThreshold;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ParamFlag = strObj.ParamFlag;
            obj.Velocity = strObj.Velocity;
            obj.LookaheadDistance = strObj.LookaheadDistance;
            obj.LookaheadRatio = strObj.LookaheadRatio;
            obj.MinimumLookaheadDistance = strObj.MinimumLookaheadDistance;
            obj.DisplacementThreshold = strObj.DisplacementThreshold;
            obj.RelativeAngleThreshold = strObj.RelativeAngleThreshold;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ParamFlag = obj.ParamFlag;
            strObj.Velocity = obj.Velocity;
            strObj.LookaheadDistance = obj.LookaheadDistance;
            strObj.LookaheadRatio = obj.LookaheadRatio;
            strObj.MinimumLookaheadDistance = obj.MinimumLookaheadDistance;
            strObj.DisplacementThreshold = obj.DisplacementThreshold;
            strObj.RelativeAngleThreshold = obj.RelativeAngleThreshold;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.runtime_manager.ConfigWaypointFollower.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.runtime_manager.ConfigWaypointFollower;
            obj.reload(strObj);
        end
    end
end
