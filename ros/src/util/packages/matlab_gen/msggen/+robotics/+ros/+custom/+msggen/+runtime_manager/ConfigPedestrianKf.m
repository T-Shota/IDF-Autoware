classdef ConfigPedestrianKf < robotics.ros.Message
    %ConfigPedestrianKf MATLAB implementation of runtime_manager/ConfigPedestrianKf
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'runtime_manager/ConfigPedestrianKf' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '35fb5980cbba7f237457ede929c58aa9' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        InitialLifespan
        DefaultLifespan
        NoiseCovariance
        MeasurementNoiseCovariance
        ErrorEstimateCovariance
        PercentageOfOverlapping
        OrbFeatures
        UseOrb
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DefaultLifespan', 'ErrorEstimateCovariance', 'Header', 'InitialLifespan', 'MeasurementNoiseCovariance', 'NoiseCovariance', 'OrbFeatures', 'PercentageOfOverlapping', 'UseOrb'} % List of non-constant message properties
        ROSPropertyList = {'default_lifespan', 'error_estimate_covariance', 'header', 'initial_lifespan', 'measurement_noise_covariance', 'noise_covariance', 'orb_features', 'percentage_of_overlapping', 'use_orb'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigPedestrianKf(msg)
            %ConfigPedestrianKf Construct the message object ConfigPedestrianKf
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function initiallifespan = get.InitialLifespan(obj)
            %get.InitialLifespan Get the value for property InitialLifespan
            initiallifespan = int32(obj.JavaMessage.getInitialLifespan);
        end
        
        function set.InitialLifespan(obj, initiallifespan)
            %set.InitialLifespan Set the value for property InitialLifespan
            validateattributes(initiallifespan, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'InitialLifespan');
            
            obj.JavaMessage.setInitialLifespan(initiallifespan);
        end
        
        function defaultlifespan = get.DefaultLifespan(obj)
            %get.DefaultLifespan Get the value for property DefaultLifespan
            defaultlifespan = int32(obj.JavaMessage.getDefaultLifespan);
        end
        
        function set.DefaultLifespan(obj, defaultlifespan)
            %set.DefaultLifespan Set the value for property DefaultLifespan
            validateattributes(defaultlifespan, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'DefaultLifespan');
            
            obj.JavaMessage.setDefaultLifespan(defaultlifespan);
        end
        
        function noisecovariance = get.NoiseCovariance(obj)
            %get.NoiseCovariance Get the value for property NoiseCovariance
            noisecovariance = single(obj.JavaMessage.getNoiseCovariance);
        end
        
        function set.NoiseCovariance(obj, noisecovariance)
            %set.NoiseCovariance Set the value for property NoiseCovariance
            validateattributes(noisecovariance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'NoiseCovariance');
            
            obj.JavaMessage.setNoiseCovariance(noisecovariance);
        end
        
        function measurementnoisecovariance = get.MeasurementNoiseCovariance(obj)
            %get.MeasurementNoiseCovariance Get the value for property MeasurementNoiseCovariance
            measurementnoisecovariance = single(obj.JavaMessage.getMeasurementNoiseCovariance);
        end
        
        function set.MeasurementNoiseCovariance(obj, measurementnoisecovariance)
            %set.MeasurementNoiseCovariance Set the value for property MeasurementNoiseCovariance
            validateattributes(measurementnoisecovariance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'MeasurementNoiseCovariance');
            
            obj.JavaMessage.setMeasurementNoiseCovariance(measurementnoisecovariance);
        end
        
        function errorestimatecovariance = get.ErrorEstimateCovariance(obj)
            %get.ErrorEstimateCovariance Get the value for property ErrorEstimateCovariance
            errorestimatecovariance = single(obj.JavaMessage.getErrorEstimateCovariance);
        end
        
        function set.ErrorEstimateCovariance(obj, errorestimatecovariance)
            %set.ErrorEstimateCovariance Set the value for property ErrorEstimateCovariance
            validateattributes(errorestimatecovariance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'ErrorEstimateCovariance');
            
            obj.JavaMessage.setErrorEstimateCovariance(errorestimatecovariance);
        end
        
        function percentageofoverlapping = get.PercentageOfOverlapping(obj)
            %get.PercentageOfOverlapping Get the value for property PercentageOfOverlapping
            percentageofoverlapping = single(obj.JavaMessage.getPercentageOfOverlapping);
        end
        
        function set.PercentageOfOverlapping(obj, percentageofoverlapping)
            %set.PercentageOfOverlapping Set the value for property PercentageOfOverlapping
            validateattributes(percentageofoverlapping, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'PercentageOfOverlapping');
            
            obj.JavaMessage.setPercentageOfOverlapping(percentageofoverlapping);
        end
        
        function orbfeatures = get.OrbFeatures(obj)
            %get.OrbFeatures Get the value for property OrbFeatures
            orbfeatures = int32(obj.JavaMessage.getOrbFeatures);
        end
        
        function set.OrbFeatures(obj, orbfeatures)
            %set.OrbFeatures Set the value for property OrbFeatures
            validateattributes(orbfeatures, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'OrbFeatures');
            
            obj.JavaMessage.setOrbFeatures(orbfeatures);
        end
        
        function useorb = get.UseOrb(obj)
            %get.UseOrb Get the value for property UseOrb
            useorb = int32(obj.JavaMessage.getUseOrb);
        end
        
        function set.UseOrb(obj, useorb)
            %set.UseOrb Set the value for property UseOrb
            validateattributes(useorb, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPedestrianKf', 'UseOrb');
            
            obj.JavaMessage.setUseOrb(useorb);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.InitialLifespan = obj.InitialLifespan;
            cpObj.DefaultLifespan = obj.DefaultLifespan;
            cpObj.NoiseCovariance = obj.NoiseCovariance;
            cpObj.MeasurementNoiseCovariance = obj.MeasurementNoiseCovariance;
            cpObj.ErrorEstimateCovariance = obj.ErrorEstimateCovariance;
            cpObj.PercentageOfOverlapping = obj.PercentageOfOverlapping;
            cpObj.OrbFeatures = obj.OrbFeatures;
            cpObj.UseOrb = obj.UseOrb;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.InitialLifespan = strObj.InitialLifespan;
            obj.DefaultLifespan = strObj.DefaultLifespan;
            obj.NoiseCovariance = strObj.NoiseCovariance;
            obj.MeasurementNoiseCovariance = strObj.MeasurementNoiseCovariance;
            obj.ErrorEstimateCovariance = strObj.ErrorEstimateCovariance;
            obj.PercentageOfOverlapping = strObj.PercentageOfOverlapping;
            obj.OrbFeatures = strObj.OrbFeatures;
            obj.UseOrb = strObj.UseOrb;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.InitialLifespan = obj.InitialLifespan;
            strObj.DefaultLifespan = obj.DefaultLifespan;
            strObj.NoiseCovariance = obj.NoiseCovariance;
            strObj.MeasurementNoiseCovariance = obj.MeasurementNoiseCovariance;
            strObj.ErrorEstimateCovariance = obj.ErrorEstimateCovariance;
            strObj.PercentageOfOverlapping = obj.PercentageOfOverlapping;
            strObj.OrbFeatures = obj.OrbFeatures;
            strObj.UseOrb = obj.UseOrb;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.runtime_manager.ConfigPedestrianKf.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.runtime_manager.ConfigPedestrianKf;
            obj.reload(strObj);
        end
    end
end
