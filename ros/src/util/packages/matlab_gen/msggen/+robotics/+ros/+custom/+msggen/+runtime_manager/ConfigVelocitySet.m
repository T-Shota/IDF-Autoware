classdef ConfigVelocitySet < robotics.ros.Message
    %ConfigVelocitySet MATLAB implementation of runtime_manager/ConfigVelocitySet
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'runtime_manager/ConfigVelocitySet' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7ef980a10c16f05933cfc170bd574214' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        OthersDistance
        DetectionRange
        ThresholdPoints
        DetectionHeightTop
        DetectionHeightBottom
        Deceleration
        VelocityChangeLimit
        DecelerationRange
        TemporalWaypointsSize
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Deceleration', 'DecelerationRange', 'DetectionHeightBottom', 'DetectionHeightTop', 'DetectionRange', 'Header', 'OthersDistance', 'TemporalWaypointsSize', 'ThresholdPoints', 'VelocityChangeLimit'} % List of non-constant message properties
        ROSPropertyList = {'deceleration', 'deceleration_range', 'detection_height_bottom', 'detection_height_top', 'detection_range', 'header', 'others_distance', 'temporal_waypoints_size', 'threshold_points', 'velocity_change_limit'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigVelocitySet(msg)
            %ConfigVelocitySet Construct the message object ConfigVelocitySet
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function othersdistance = get.OthersDistance(obj)
            %get.OthersDistance Get the value for property OthersDistance
            othersdistance = single(obj.JavaMessage.getOthersDistance);
        end
        
        function set.OthersDistance(obj, othersdistance)
            %set.OthersDistance Set the value for property OthersDistance
            validateattributes(othersdistance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'OthersDistance');
            
            obj.JavaMessage.setOthersDistance(othersdistance);
        end
        
        function detectionrange = get.DetectionRange(obj)
            %get.DetectionRange Get the value for property DetectionRange
            detectionrange = single(obj.JavaMessage.getDetectionRange);
        end
        
        function set.DetectionRange(obj, detectionrange)
            %set.DetectionRange Set the value for property DetectionRange
            validateattributes(detectionrange, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'DetectionRange');
            
            obj.JavaMessage.setDetectionRange(detectionrange);
        end
        
        function thresholdpoints = get.ThresholdPoints(obj)
            %get.ThresholdPoints Get the value for property ThresholdPoints
            thresholdpoints = int32(obj.JavaMessage.getThresholdPoints);
        end
        
        function set.ThresholdPoints(obj, thresholdpoints)
            %set.ThresholdPoints Set the value for property ThresholdPoints
            validateattributes(thresholdpoints, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'ThresholdPoints');
            
            obj.JavaMessage.setThresholdPoints(thresholdpoints);
        end
        
        function detectionheighttop = get.DetectionHeightTop(obj)
            %get.DetectionHeightTop Get the value for property DetectionHeightTop
            detectionheighttop = single(obj.JavaMessage.getDetectionHeightTop);
        end
        
        function set.DetectionHeightTop(obj, detectionheighttop)
            %set.DetectionHeightTop Set the value for property DetectionHeightTop
            validateattributes(detectionheighttop, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'DetectionHeightTop');
            
            obj.JavaMessage.setDetectionHeightTop(detectionheighttop);
        end
        
        function detectionheightbottom = get.DetectionHeightBottom(obj)
            %get.DetectionHeightBottom Get the value for property DetectionHeightBottom
            detectionheightbottom = single(obj.JavaMessage.getDetectionHeightBottom);
        end
        
        function set.DetectionHeightBottom(obj, detectionheightbottom)
            %set.DetectionHeightBottom Set the value for property DetectionHeightBottom
            validateattributes(detectionheightbottom, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'DetectionHeightBottom');
            
            obj.JavaMessage.setDetectionHeightBottom(detectionheightbottom);
        end
        
        function deceleration = get.Deceleration(obj)
            %get.Deceleration Get the value for property Deceleration
            deceleration = single(obj.JavaMessage.getDeceleration);
        end
        
        function set.Deceleration(obj, deceleration)
            %set.Deceleration Set the value for property Deceleration
            validateattributes(deceleration, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'Deceleration');
            
            obj.JavaMessage.setDeceleration(deceleration);
        end
        
        function velocitychangelimit = get.VelocityChangeLimit(obj)
            %get.VelocityChangeLimit Get the value for property VelocityChangeLimit
            velocitychangelimit = single(obj.JavaMessage.getVelocityChangeLimit);
        end
        
        function set.VelocityChangeLimit(obj, velocitychangelimit)
            %set.VelocityChangeLimit Set the value for property VelocityChangeLimit
            validateattributes(velocitychangelimit, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'VelocityChangeLimit');
            
            obj.JavaMessage.setVelocityChangeLimit(velocitychangelimit);
        end
        
        function decelerationrange = get.DecelerationRange(obj)
            %get.DecelerationRange Get the value for property DecelerationRange
            decelerationrange = single(obj.JavaMessage.getDecelerationRange);
        end
        
        function set.DecelerationRange(obj, decelerationrange)
            %set.DecelerationRange Set the value for property DecelerationRange
            validateattributes(decelerationrange, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'DecelerationRange');
            
            obj.JavaMessage.setDecelerationRange(decelerationrange);
        end
        
        function temporalwaypointssize = get.TemporalWaypointsSize(obj)
            %get.TemporalWaypointsSize Get the value for property TemporalWaypointsSize
            temporalwaypointssize = single(obj.JavaMessage.getTemporalWaypointsSize);
        end
        
        function set.TemporalWaypointsSize(obj, temporalwaypointssize)
            %set.TemporalWaypointsSize Set the value for property TemporalWaypointsSize
            validateattributes(temporalwaypointssize, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigVelocitySet', 'TemporalWaypointsSize');
            
            obj.JavaMessage.setTemporalWaypointsSize(temporalwaypointssize);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.OthersDistance = obj.OthersDistance;
            cpObj.DetectionRange = obj.DetectionRange;
            cpObj.ThresholdPoints = obj.ThresholdPoints;
            cpObj.DetectionHeightTop = obj.DetectionHeightTop;
            cpObj.DetectionHeightBottom = obj.DetectionHeightBottom;
            cpObj.Deceleration = obj.Deceleration;
            cpObj.VelocityChangeLimit = obj.VelocityChangeLimit;
            cpObj.DecelerationRange = obj.DecelerationRange;
            cpObj.TemporalWaypointsSize = obj.TemporalWaypointsSize;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.OthersDistance = strObj.OthersDistance;
            obj.DetectionRange = strObj.DetectionRange;
            obj.ThresholdPoints = strObj.ThresholdPoints;
            obj.DetectionHeightTop = strObj.DetectionHeightTop;
            obj.DetectionHeightBottom = strObj.DetectionHeightBottom;
            obj.Deceleration = strObj.Deceleration;
            obj.VelocityChangeLimit = strObj.VelocityChangeLimit;
            obj.DecelerationRange = strObj.DecelerationRange;
            obj.TemporalWaypointsSize = strObj.TemporalWaypointsSize;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.OthersDistance = obj.OthersDistance;
            strObj.DetectionRange = obj.DetectionRange;
            strObj.ThresholdPoints = obj.ThresholdPoints;
            strObj.DetectionHeightTop = obj.DetectionHeightTop;
            strObj.DetectionHeightBottom = obj.DetectionHeightBottom;
            strObj.Deceleration = obj.Deceleration;
            strObj.VelocityChangeLimit = obj.VelocityChangeLimit;
            strObj.DecelerationRange = obj.DecelerationRange;
            strObj.TemporalWaypointsSize = obj.TemporalWaypointsSize;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.runtime_manager.ConfigVelocitySet.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.runtime_manager.ConfigVelocitySet;
            obj.reload(strObj);
        end
    end
end
