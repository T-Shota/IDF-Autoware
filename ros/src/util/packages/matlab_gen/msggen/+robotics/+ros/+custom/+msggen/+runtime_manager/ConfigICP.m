classdef ConfigICP < robotics.ros.Message
    %ConfigICP MATLAB implementation of runtime_manager/ConfigICP
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'runtime_manager/ConfigICP' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5447e477cc209f1aaba7597ea7741dc8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        InitPosGnss
        X
        Y
        Z
        Roll
        Pitch
        Yaw
        UsePredictPose
        ErrorThreshold
        MaximumIterations
        TransformationEpsilon
        MaxCorrespondenceDistance
        EuclideanFitnessEpsilon
        RansacOutlierRejectionThreshold
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ErrorThreshold', 'EuclideanFitnessEpsilon', 'Header', 'InitPosGnss', 'MaxCorrespondenceDistance', 'MaximumIterations', 'Pitch', 'RansacOutlierRejectionThreshold', 'Roll', 'TransformationEpsilon', 'UsePredictPose', 'X', 'Y', 'Yaw', 'Z'} % List of non-constant message properties
        ROSPropertyList = {'error_threshold', 'euclidean_fitness_epsilon', 'header', 'init_pos_gnss', 'max_correspondence_distance', 'maximum_iterations', 'pitch', 'ransac_outlier_rejection_threshold', 'roll', 'transformation_epsilon', 'use_predict_pose', 'x', 'y', 'yaw', 'z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigICP(msg)
            %ConfigICP Construct the message object ConfigICP
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ConfigICP', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function initposgnss = get.InitPosGnss(obj)
            %get.InitPosGnss Get the value for property InitPosGnss
            initposgnss = int32(obj.JavaMessage.getInitPosGnss);
        end
        
        function set.InitPosGnss(obj, initposgnss)
            %set.InitPosGnss Set the value for property InitPosGnss
            validateattributes(initposgnss, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'InitPosGnss');
            
            obj.JavaMessage.setInitPosGnss(initposgnss);
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = single(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = single(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function z = get.Z(obj)
            %get.Z Get the value for property Z
            z = single(obj.JavaMessage.getZ);
        end
        
        function set.Z(obj, z)
            %set.Z Set the value for property Z
            validateattributes(z, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'Z');
            
            obj.JavaMessage.setZ(z);
        end
        
        function roll = get.Roll(obj)
            %get.Roll Get the value for property Roll
            roll = single(obj.JavaMessage.getRoll);
        end
        
        function set.Roll(obj, roll)
            %set.Roll Set the value for property Roll
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'Roll');
            
            obj.JavaMessage.setRoll(roll);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = single(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = single(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function usepredictpose = get.UsePredictPose(obj)
            %get.UsePredictPose Get the value for property UsePredictPose
            usepredictpose = int32(obj.JavaMessage.getUsePredictPose);
        end
        
        function set.UsePredictPose(obj, usepredictpose)
            %set.UsePredictPose Set the value for property UsePredictPose
            validateattributes(usepredictpose, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'UsePredictPose');
            
            obj.JavaMessage.setUsePredictPose(usepredictpose);
        end
        
        function errorthreshold = get.ErrorThreshold(obj)
            %get.ErrorThreshold Get the value for property ErrorThreshold
            errorthreshold = single(obj.JavaMessage.getErrorThreshold);
        end
        
        function set.ErrorThreshold(obj, errorthreshold)
            %set.ErrorThreshold Set the value for property ErrorThreshold
            validateattributes(errorthreshold, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'ErrorThreshold');
            
            obj.JavaMessage.setErrorThreshold(errorthreshold);
        end
        
        function maximumiterations = get.MaximumIterations(obj)
            %get.MaximumIterations Get the value for property MaximumIterations
            maximumiterations = int32(obj.JavaMessage.getMaximumIterations);
        end
        
        function set.MaximumIterations(obj, maximumiterations)
            %set.MaximumIterations Set the value for property MaximumIterations
            validateattributes(maximumiterations, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'MaximumIterations');
            
            obj.JavaMessage.setMaximumIterations(maximumiterations);
        end
        
        function transformationepsilon = get.TransformationEpsilon(obj)
            %get.TransformationEpsilon Get the value for property TransformationEpsilon
            transformationepsilon = single(obj.JavaMessage.getTransformationEpsilon);
        end
        
        function set.TransformationEpsilon(obj, transformationepsilon)
            %set.TransformationEpsilon Set the value for property TransformationEpsilon
            validateattributes(transformationepsilon, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'TransformationEpsilon');
            
            obj.JavaMessage.setTransformationEpsilon(transformationepsilon);
        end
        
        function maxcorrespondencedistance = get.MaxCorrespondenceDistance(obj)
            %get.MaxCorrespondenceDistance Get the value for property MaxCorrespondenceDistance
            maxcorrespondencedistance = single(obj.JavaMessage.getMaxCorrespondenceDistance);
        end
        
        function set.MaxCorrespondenceDistance(obj, maxcorrespondencedistance)
            %set.MaxCorrespondenceDistance Set the value for property MaxCorrespondenceDistance
            validateattributes(maxcorrespondencedistance, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'MaxCorrespondenceDistance');
            
            obj.JavaMessage.setMaxCorrespondenceDistance(maxcorrespondencedistance);
        end
        
        function euclideanfitnessepsilon = get.EuclideanFitnessEpsilon(obj)
            %get.EuclideanFitnessEpsilon Get the value for property EuclideanFitnessEpsilon
            euclideanfitnessepsilon = single(obj.JavaMessage.getEuclideanFitnessEpsilon);
        end
        
        function set.EuclideanFitnessEpsilon(obj, euclideanfitnessepsilon)
            %set.EuclideanFitnessEpsilon Set the value for property EuclideanFitnessEpsilon
            validateattributes(euclideanfitnessepsilon, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'EuclideanFitnessEpsilon');
            
            obj.JavaMessage.setEuclideanFitnessEpsilon(euclideanfitnessepsilon);
        end
        
        function ransacoutlierrejectionthreshold = get.RansacOutlierRejectionThreshold(obj)
            %get.RansacOutlierRejectionThreshold Get the value for property RansacOutlierRejectionThreshold
            ransacoutlierrejectionthreshold = single(obj.JavaMessage.getRansacOutlierRejectionThreshold);
        end
        
        function set.RansacOutlierRejectionThreshold(obj, ransacoutlierrejectionthreshold)
            %set.RansacOutlierRejectionThreshold Set the value for property RansacOutlierRejectionThreshold
            validateattributes(ransacoutlierrejectionthreshold, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigICP', 'RansacOutlierRejectionThreshold');
            
            obj.JavaMessage.setRansacOutlierRejectionThreshold(ransacoutlierrejectionthreshold);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.InitPosGnss = obj.InitPosGnss;
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Z = obj.Z;
            cpObj.Roll = obj.Roll;
            cpObj.Pitch = obj.Pitch;
            cpObj.Yaw = obj.Yaw;
            cpObj.UsePredictPose = obj.UsePredictPose;
            cpObj.ErrorThreshold = obj.ErrorThreshold;
            cpObj.MaximumIterations = obj.MaximumIterations;
            cpObj.TransformationEpsilon = obj.TransformationEpsilon;
            cpObj.MaxCorrespondenceDistance = obj.MaxCorrespondenceDistance;
            cpObj.EuclideanFitnessEpsilon = obj.EuclideanFitnessEpsilon;
            cpObj.RansacOutlierRejectionThreshold = obj.RansacOutlierRejectionThreshold;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.InitPosGnss = strObj.InitPosGnss;
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Z = strObj.Z;
            obj.Roll = strObj.Roll;
            obj.Pitch = strObj.Pitch;
            obj.Yaw = strObj.Yaw;
            obj.UsePredictPose = strObj.UsePredictPose;
            obj.ErrorThreshold = strObj.ErrorThreshold;
            obj.MaximumIterations = strObj.MaximumIterations;
            obj.TransformationEpsilon = strObj.TransformationEpsilon;
            obj.MaxCorrespondenceDistance = strObj.MaxCorrespondenceDistance;
            obj.EuclideanFitnessEpsilon = strObj.EuclideanFitnessEpsilon;
            obj.RansacOutlierRejectionThreshold = strObj.RansacOutlierRejectionThreshold;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.InitPosGnss = obj.InitPosGnss;
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Z = obj.Z;
            strObj.Roll = obj.Roll;
            strObj.Pitch = obj.Pitch;
            strObj.Yaw = obj.Yaw;
            strObj.UsePredictPose = obj.UsePredictPose;
            strObj.ErrorThreshold = obj.ErrorThreshold;
            strObj.MaximumIterations = obj.MaximumIterations;
            strObj.TransformationEpsilon = obj.TransformationEpsilon;
            strObj.MaxCorrespondenceDistance = obj.MaxCorrespondenceDistance;
            strObj.EuclideanFitnessEpsilon = obj.EuclideanFitnessEpsilon;
            strObj.RansacOutlierRejectionThreshold = obj.RansacOutlierRejectionThreshold;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.runtime_manager.ConfigICP.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.runtime_manager.ConfigICP;
            obj.reload(strObj);
        end
    end
end
