classdef ConfigPoints2Polygon < robotics.ros.Message
    %ConfigPoints2Polygon MATLAB implementation of runtime_manager/ConfigPoints2Polygon
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'runtime_manager/ConfigPoints2Polygon' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '9b14a69dff1a04a736a3b125792a41bf' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        KSearch
        SearchRadius
        Mu
        MaximumNearestNeighbors
        MaximumSurfaceAngle
        MinimumAngle
        MaximumAngle
        NormalConsistency
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'KSearch', 'MaximumAngle', 'MaximumNearestNeighbors', 'MaximumSurfaceAngle', 'MinimumAngle', 'Mu', 'NormalConsistency', 'SearchRadius'} % List of non-constant message properties
        ROSPropertyList = {'header', 'k_search', 'maximum_angle', 'maximum_nearest_neighbors', 'maximum_surface_angle', 'minimum_angle', 'mu', 'normal_consistency', 'search_radius'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ConfigPoints2Polygon(msg)
            %ConfigPoints2Polygon Construct the message object ConfigPoints2Polygon
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function ksearch = get.KSearch(obj)
            %get.KSearch Get the value for property KSearch
            ksearch = int32(obj.JavaMessage.getKSearch);
        end
        
        function set.KSearch(obj, ksearch)
            %set.KSearch Set the value for property KSearch
            validateattributes(ksearch, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'KSearch');
            
            obj.JavaMessage.setKSearch(ksearch);
        end
        
        function searchradius = get.SearchRadius(obj)
            %get.SearchRadius Get the value for property SearchRadius
            searchradius = single(obj.JavaMessage.getSearchRadius);
        end
        
        function set.SearchRadius(obj, searchradius)
            %set.SearchRadius Set the value for property SearchRadius
            validateattributes(searchradius, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'SearchRadius');
            
            obj.JavaMessage.setSearchRadius(searchradius);
        end
        
        function mu = get.Mu(obj)
            %get.Mu Get the value for property Mu
            mu = single(obj.JavaMessage.getMu);
        end
        
        function set.Mu(obj, mu)
            %set.Mu Set the value for property Mu
            validateattributes(mu, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'Mu');
            
            obj.JavaMessage.setMu(mu);
        end
        
        function maximumnearestneighbors = get.MaximumNearestNeighbors(obj)
            %get.MaximumNearestNeighbors Get the value for property MaximumNearestNeighbors
            maximumnearestneighbors = int32(obj.JavaMessage.getMaximumNearestNeighbors);
        end
        
        function set.MaximumNearestNeighbors(obj, maximumnearestneighbors)
            %set.MaximumNearestNeighbors Set the value for property MaximumNearestNeighbors
            validateattributes(maximumnearestneighbors, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'MaximumNearestNeighbors');
            
            obj.JavaMessage.setMaximumNearestNeighbors(maximumnearestneighbors);
        end
        
        function maximumsurfaceangle = get.MaximumSurfaceAngle(obj)
            %get.MaximumSurfaceAngle Get the value for property MaximumSurfaceAngle
            maximumsurfaceangle = single(obj.JavaMessage.getMaximumSurfaceAngle);
        end
        
        function set.MaximumSurfaceAngle(obj, maximumsurfaceangle)
            %set.MaximumSurfaceAngle Set the value for property MaximumSurfaceAngle
            validateattributes(maximumsurfaceangle, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'MaximumSurfaceAngle');
            
            obj.JavaMessage.setMaximumSurfaceAngle(maximumsurfaceangle);
        end
        
        function minimumangle = get.MinimumAngle(obj)
            %get.MinimumAngle Get the value for property MinimumAngle
            minimumangle = single(obj.JavaMessage.getMinimumAngle);
        end
        
        function set.MinimumAngle(obj, minimumangle)
            %set.MinimumAngle Set the value for property MinimumAngle
            validateattributes(minimumangle, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'MinimumAngle');
            
            obj.JavaMessage.setMinimumAngle(minimumangle);
        end
        
        function maximumangle = get.MaximumAngle(obj)
            %get.MaximumAngle Get the value for property MaximumAngle
            maximumangle = single(obj.JavaMessage.getMaximumAngle);
        end
        
        function set.MaximumAngle(obj, maximumangle)
            %set.MaximumAngle Set the value for property MaximumAngle
            validateattributes(maximumangle, {'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'MaximumAngle');
            
            obj.JavaMessage.setMaximumAngle(maximumangle);
        end
        
        function normalconsistency = get.NormalConsistency(obj)
            %get.NormalConsistency Get the value for property NormalConsistency
            normalconsistency = logical(obj.JavaMessage.getNormalConsistency);
        end
        
        function set.NormalConsistency(obj, normalconsistency)
            %set.NormalConsistency Set the value for property NormalConsistency
            validateattributes(normalconsistency, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ConfigPoints2Polygon', 'NormalConsistency');
            
            obj.JavaMessage.setNormalConsistency(normalconsistency);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.KSearch = obj.KSearch;
            cpObj.SearchRadius = obj.SearchRadius;
            cpObj.Mu = obj.Mu;
            cpObj.MaximumNearestNeighbors = obj.MaximumNearestNeighbors;
            cpObj.MaximumSurfaceAngle = obj.MaximumSurfaceAngle;
            cpObj.MinimumAngle = obj.MinimumAngle;
            cpObj.MaximumAngle = obj.MaximumAngle;
            cpObj.NormalConsistency = obj.NormalConsistency;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.KSearch = strObj.KSearch;
            obj.SearchRadius = strObj.SearchRadius;
            obj.Mu = strObj.Mu;
            obj.MaximumNearestNeighbors = strObj.MaximumNearestNeighbors;
            obj.MaximumSurfaceAngle = strObj.MaximumSurfaceAngle;
            obj.MinimumAngle = strObj.MinimumAngle;
            obj.MaximumAngle = strObj.MaximumAngle;
            obj.NormalConsistency = strObj.NormalConsistency;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.KSearch = obj.KSearch;
            strObj.SearchRadius = obj.SearchRadius;
            strObj.Mu = obj.Mu;
            strObj.MaximumNearestNeighbors = obj.MaximumNearestNeighbors;
            strObj.MaximumSurfaceAngle = obj.MaximumSurfaceAngle;
            strObj.MinimumAngle = obj.MinimumAngle;
            strObj.MaximumAngle = obj.MaximumAngle;
            strObj.NormalConsistency = obj.NormalConsistency;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.runtime_manager.ConfigPoints2Polygon.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.runtime_manager.ConfigPoints2Polygon;
            obj.reload(strObj);
        end
    end
end
